name: Build and deploy
on:
  workflow_run:
    workflows: [Test and build]
    types:
      - completed
    branches:
      - master
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: false
        default: 'info'
        type: choice
        options:
        - info
        - warning
        - debug
env:
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  APP_NAME: market_data_notification
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  REGISTRY_USER: ${{ github.actor }}
jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          # Can't use self-defined environment variables for some reason
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_BUILD_PUSH_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          push: true
          target: release
          tags: ghcr.io/${{ github.repository_owner }}/market_data_notification:${{ github.sha }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/market_data_notification:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/market_data_notification:buildcache,mode=max
  health_check:
    runs-on: ubuntu-latest
    needs: [build_and_upload]
    steps:
      - name: Check whether market data notification is up
        id: health_check
        run: |
          curl $SSH_HOST/healthz
  notify_unsuccessful_health_check:
    runs-on: ubuntu-latest
    needs: [health_check]
    if: ${{ failure() }}
    steps:
      - name: Send telegram notification unsuccessful run
        env:
          TELEGRAM_DEV_BOT_TOKEN: ${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}
          TELEGRAM_DEV_ID: ${{ secrets.TELEGRAM_DEV_ID }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          text=$(echo "\[Github action\] Market data notification backend build and deploy failed at $now. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" | sed 's~[[:blank:]]~%20~g')
          curl "https://api.telegram.org/bot${TELEGRAM_DEV_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_DEV_ID}&text=$text"
          exit 1
  deploy:
    runs-on: ubuntu-latest
    needs: [health_check]
    steps:
      - uses: actions/checkout@v3
      - name: Configure SSH
        id: ssh
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/market_data_notification_rsa
          chmod 600 ~/.ssh/market_data_notification_rsa
          SSH_HOST_IP=$(nslookup $SSH_HOST | tail -n 2 | head -n 1 | cut -d ' ' -f 2)
          echo "host name: $SSH_HOST, host ip address: $SSH_HOST_IP"
          cat << EOF >> ~/.ssh/config
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/market_data_notification_rsa
            StrictHostKeyChecking no
          EOF
      - name: SSH into server, pull image, run container
        id: deploy
        env:
          DOCKER_PULL_PASSWORD: ${{ secrets.DOCKER_PULL_TOKEN }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          TELEGRAM_ADMIN_BOT_TOKEN: ${{ secrets.TELEGRAM_ADMIN_BOT_TOKEN }}
          TELEGRAM_ADMIN_ID: ${{ secrets.TELEGRAM_ADMIN_ID }}
          TELEGRAM_DEV_BOT_TOKEN: ${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}
          TELEGRAM_DEV_ID: ${{ secrets.TELEGRAM_DEV_ID }}
          SIMULATE_TRADINGVIEW_TRAFFIC: ${{ secrets.SIMULATE_TRADINGVIEW_TRAFFIC }}
          IS_TESTING_TELEGRAM: ${{ secrets.IS_TESTING_TELEGRAM }}
          TRADING_VIEW_IPS: ${{ secrets.TRADING_VIEW_IPS }}
          TRADING_VIEW_WEBHOOK_SECRET: ${{ secrets.TRADING_VIEW_WEBHOOK_SECRET }}
          DISABLE_TELEGRAM: ${{ secrets.DISABLE_TELEGRAM }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: $${{ secrets.REDIS_PORT }}
          REDIS_DB: $${{ secrets.REDIS_DB }}
        run: |
          ssh production << EOF
          echo "Logging into container registry"
          echo $DOCKER_PULL_PASSWORD | docker login ghcr.io -u $REGISTRY_USER --password-stdin

          echo "Pulling image"
          docker pull "$IMAGE_REGISTRY/$APP_NAME:$GITHUB_SHA"

          echo "Stopping existing container"
          docker stop $APP_NAME && docker rm $APP_NAME

          echo "Starting new container"
          docker run --name $APP_NAME -p 8080:8080 --network host -m 200m --cpus="0.5" -e TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN \
          -e TELEGRAM_CHANNEL_ID=$TELEGRAM_CHANNEL_ID -e TELEGRAM_ADMIN_BOT_TOKEN=$TELEGRAM_ADMIN_BOT_TOKEN \
          -e TELEGRAM_ADMIN_ID=$TELEGRAM_ADMIN_ID -e TELEGRAM_DEV_BOT_TOKEN=$TELEGRAM_DEV_BOT_TOKEN -e TELEGRAM_DEV_ID=$TELEGRAM_DEV_ID \
          -e SIMULATE_TRADINGVIEW_TRAFFIC=$SIMULATE_TRADINGVIEW_TRAFFIC \
          -e IS_TESTING_TELEGRAM=$IS_TESTING_TELEGRAM -e TRADING_VIEW_IPS=$TRADING_VIEW_IPS -e TRADING_VIEW_WEBHOOK_SECRET=$TRADING_VIEW_WEBHOOK_SECRET \
          -e DISABLE_TELEGRAM=$DISABLE_TELEGRAM -e REDIS_HOST=$REDIS_HOST -e REDIS_PORT=$REDIS_PORT \
          -e REDIS_DB=$REDIS_DB -d "$IMAGE_REGISTRY/$APP_NAME:$GITHUB_SHA"

          sleep 3
          docker ps

          docker image prune -fa
          EOF
          rm -rf ~/.ssh
  notify_unsuccessful:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ failure() }}
    steps:
      - name: Send telegram notification unsuccessful run
        env:
          TELEGRAM_DEV_BOT_TOKEN: ${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}
          TELEGRAM_DEV_ID: ${{ secrets.TELEGRAM_DEV_ID }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          text=$(echo "\[Github action\] Market data notification backend build and deploy failed at $now. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" | sed 's~[[:blank:]]~%20~g')
          curl "https://api.telegram.org/bot${TELEGRAM_DEV_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_DEV_ID}&text=$text"
  notify_successful:
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Send telegram notification successful run
        env:
          TELEGRAM_DEV_BOT_TOKEN: ${{ secrets.TELEGRAM_DEV_BOT_TOKEN }}
          TELEGRAM_DEV_ID: ${{ secrets.TELEGRAM_DEV_ID }}
        run: |
          now=$(date +%Y-%m-%dT%H:%M:%S)
          text=$(echo "\[Github action\] Market data notification backend build and deploy succeeded at $now. Workflow: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" | sed 's~[[:blank:]]~%20~g')
          curl "https://api.telegram.org/bot${TELEGRAM_DEV_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_DEV_ID}&text=$text"

